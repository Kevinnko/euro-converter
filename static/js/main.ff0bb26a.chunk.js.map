{"version":3,"sources":["assets/images/converter-bg.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_KEY","process","App","useState","amount","setAmount","currencies","setCurrencies","rates","setRates","selectedCurrency","setSelectedCurrency","result","setResult","eurosInput","useRef","formatedAmount","Intl","NumberFormat","style","currency","format","getCurrencies","a","currenciesArray","axios","get","res","data","success","symbols","Object","entries","key","value","push","symbol","name","console","log","getRates","ratesArray","rate","useEffect","length","currencyRate","find","calculatedResult","formatedResult","convert","className","backgroundImage","Background","onClick","current","focus","TextField","inputRef","label","type","placeholder","InputLabelProps","shrink","onChange","e","currentValue","target","variant","FormControl","InputLabel","Select","MenuItem","map","index","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ff0bb26a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/converter-bg.415346af.jpg\";","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport Background from \"./assets/images/converter-bg.jpg\";\nimport axios from \"axios\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst App = () => {\n  const [amount, setAmount] = useState();\n  const [currencies, setCurrencies] = useState([]);\n  const [rates, setRates] = useState([]);\n  const [selectedCurrency, setSelectedCurrency] = useState(\"\");\n  const [result, setResult] = useState(null);\n\n  const eurosInput = useRef(null);\n\n  const formatedAmount = new Intl.NumberFormat(\"fr-FR\", {\n    style: \"currency\",\n    currency: \"EUR\",\n  }).format(amount);\n\n  const handleChange = (e) => {\n    const currentValue = e.target.value;\n    setAmount(currentValue);\n    if (!currentValue) {\n      setResult(null);\n    }\n  };\n\n  const getCurrencies = async () => {\n    const currenciesArray = [];\n    try {\n      const res = await axios.get(\n        `http://data.fixer.io/api/symbols?access_key=${API_KEY}`\n      );\n      const { success, symbols } = res.data;\n      if (success) {\n        // Put received currencies in an array\n        for (const [key, value] of Object.entries(symbols)) {\n          currenciesArray.push({ symbol: key, name: value });\n        }\n        setCurrencies(currenciesArray);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const getRates = async () => {\n    const ratesArray = [];\n    try {\n      const res = await axios.get(\n        `http://data.fixer.io/api/latest?access_key=${API_KEY}&base=EUR`\n      );\n      const { success, rates } = res.data;\n      if (success) {\n        for (const [key, value] of Object.entries(rates)) {\n          ratesArray.push({ symbol: key, rate: value });\n        }\n        setRates(ratesArray);\n      }\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  };\n\n  useEffect(() => {\n    // Get all available currencies and rates\n    getCurrencies();\n    getRates();\n  }, []);\n\n  useEffect(() => {\n    const convert = () => {\n      if (rates.length > 0) {\n        const currencyRate = rates.find(\n          (rate) => rate.symbol === selectedCurrency\n        );\n        if (amount && currencyRate) {\n          const calculatedResult = amount * currencyRate.rate;\n\n          const formatedResult = new Intl.NumberFormat({\n            style: \"currency\",\n            currency: selectedCurrency,\n          }).format(calculatedResult);\n\n          setResult(formatedResult);\n        }\n      }\n    };\n    convert();\n  }, [amount, selectedCurrency, rates]);\n\n  return (\n    <div\n      className=\"container\"\n      style={{ backgroundImage: `url(${Background})` }}\n    >\n      <div className=\"content-wrapper\">\n        <div className=\"left-wrapper\">\n          <h1>\n            Stunning\n            <br /> €uro converter\n          </h1>\n          <p className=\"subtitle\">\n            Convert euros in the currency of your choice in no time. It’s easy,\n            it’s free, and it’s based on real-time exchange rate for 170 world\n            currencies.\n          </p>\n          <button onClick={() => eurosInput.current.focus()}>Let's go</button>\n        </div>\n        <div className=\"converter\">\n          <h2>How to convert your euros into another currency</h2>\n          <p className=\"subtitle\">\n            Enter the amount of euros you want to convert, and choose the\n            currency you want. We do the conversion and serve it to you on a\n            silver platter, instantly.\n          </p>\n          <div className=\"form-wrapper\">\n            <TextField\n              inputRef={eurosInput}\n              label=\"Euros\"\n              name=\"amount\"\n              type=\"number\"\n              placeholder=\"Amount in euros\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n              value={amount || \"\"}\n              onChange={handleChange}\n              variant=\"outlined\"\n            />\n            <FormControl variant=\"outlined\">\n              <InputLabel>Currency</InputLabel>\n              <Select\n                value={selectedCurrency}\n                onChange={(e) => setSelectedCurrency(e.target.value)}\n                label=\"Currency\"\n              >\n                <MenuItem value=\"\">\n                  <em>None</em>\n                </MenuItem>\n                {currencies &&\n                  currencies.map((currency, index) => {\n                    return (\n                      <MenuItem\n                        key={index}\n                        value={currency.symbol}\n                      >{`${currency.symbol} - ${currency.name}`}</MenuItem>\n                    );\n                  })}\n              </Select>\n            </FormControl>\n          </div>\n          {result ? (\n            <p className=\"result\">{`${formatedAmount} = ${result} ${selectedCurrency}`}</p>\n          ) : (\n            <p className=\"result\">Your result will appear here</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}